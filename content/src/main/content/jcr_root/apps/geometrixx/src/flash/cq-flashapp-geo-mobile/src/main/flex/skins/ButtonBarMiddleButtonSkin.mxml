<?xml version="1.0" encoding="utf-8"?>

<!--

    ADOBE SYSTEMS INCORPORATED
    Copyright 2008 Adobe Systems Incorporated
    All Rights Reserved.

    NOTICE: Adobe permits you to use, modify, and distribute this file
    in accordance with the terms of the license agreement accompanying it.

-->

<!--- The default skin class for the first button in a Spark ButtonBar component.  

       @see spark.components.ButtonBar
       @see spark.components.ButtonBarButton
        
      @langversion 3.0
      @playerversion Flash 10
      @playerversion AIR 1.5
      @productversion Flex 4
-->
<s:SparkButtonSkin xmlns:fx="http://ns.adobe.com/mxml/2009" 
                   xmlns:s="library://ns.adobe.com/flex/spark" 
                   xmlns:fb="http://ns.adobe.com/flashbuilder/2009"
                   minWidth="21" minHeight="21" 
                   alpha.disabled="0.5">

    <!-- host component -->
    <fx:Metadata>
    <![CDATA[ 
        /** 
         * @copy spark.skins.spark.ApplicationSkin#hostComponent
         */
        [HostComponent("spark.components.ButtonBarButton")]
    ]]>
    </fx:Metadata>
    
    <fx:Script fb:purpose="styling">
        
        /* Define the skin elements that should not be colorized. 
           For toggle button, the graphics are colorized but the label is not. */
        static private const exclusions:Array = ["labelDisplay"];

       /** 
        * @private
        */     
        override public function get colorizeExclusions():Array {return exclusions;}
       
        /**
         * @private
         */
        override protected function initializationComplete():void
        {
            useChromeColor = true;
            super.initializationComplete();
        }
 
    </fx:Script>
    
    <!-- states -->
    <s:states>
        <s:State name="up" />
        <s:State name="over" stateGroups="overStates" />
        <s:State name="down" stateGroups="downStates" />
        <s:State name="disabled" stateGroups="disabledStates" />
        <s:State name="upAndSelected" stateGroups="selectedStates, selectedUpStates" />
        <s:State name="overAndSelected" stateGroups="overStates, selectedStates" />
        <s:State name="downAndSelected" stateGroups="downStates, selectedStates" />
        <s:State name="disabledAndSelected" stateGroups="selectedUpStates, disabledStates, selectedStates" />
    </s:states>
        
    <s:Group left="-1" right="0" top="-1" bottom="-1">
    
		<s:Rect id="border" left="0" right="0" top="1" bottom="1">
			<s:stroke>
				<s:SolidColorStroke color="0"/>
			</s:stroke>
		</s:Rect>

        <s:Rect id="fill" left="1" right="1" top="2" bottom="2">
            <s:fill>
                <s:LinearGradient rotation="90" >
                    <s:GradientEntry color="0x6b6b6b" color.selectedStates="0x444444" color.down="0x323232" />
                    <s:GradientEntry color="0x484848" color.selectedStates="0x404040" color.down="0x3d3d3d" />
                </s:LinearGradient>
            </s:fill>
        </s:Rect>
        
        <s:Rect id="stroke" left="1" right="1" top="2" bottom="2" bottomLeftRadiusX="2" bottomRightRadiusX="2">
            <s:stroke>
                <s:LinearGradientStroke rotation="90" weight="1">
                    <s:GradientEntry color="0x787878" color.selectedStates="0x3d3d3d" color.down="0x2c2c2c"/>
                    <s:GradientEntry color="0x585858" color.selectedStates="0x393939" color.down="0x363636"/>
                </s:LinearGradientStroke>
            </s:stroke>
        </s:Rect>
    </s:Group>
    
    <!-- layer 8: text -->
    <!---  @copy spark.components.supportClasses.ButtonBase#labelDisplay -->
    <s:Label id="labelDisplay"
             textAlign="center"
             verticalAlign="middle"
             maxDisplayedLines="1"
             horizontalCenter="0" verticalCenter="1"
             left="10" right="10" top="2" bottom="2">
    </s:Label>
    
</s:SparkButtonSkin>
